{"title":"Reshaping and Combining Multiple DataFrames to Long Format in R","markdown":{"yaml":{"filters":["../code-summary-chunk-label.lua"]},"headingText":"Reshaping and Combining Multiple DataFrames to Long Format in R","containsRefs":false,"markdown":"\n\n\n\n::: callout-note\nThe data presented in these examples are not real, but are simulated to appear realistic. No sensitive information is displayed, used, or otherwise exposed here.\n:::\n\n## Problem Description\nWhen working with multiple dataframes containing categorical variables, counts, and percentages, combining them with bind_rows() can introduce a large number of NA values. This happens because each dataframe contains different sets of categorical variables, leading to sparse structures when merged.\n\nFor example:\n\n-   One dataframe may contain age groups and their population counts.\n-   Another may include gender breakdowns but no age information.\n-   Others focus on specific mental health diagnoses, with each diagnosis stored in its own separate dataframe.\n\nAfter using bind_rows(), the result includes many columns filled with NAs because the original dataframes don’t share all the same variables. This makes downstream analysis (such as creating tables and plots) more cumbersome.\n\n## Proposed Solution: Restructuring Before Merging\n\nTo make the data more manageable:\n\n1.  Store each diagnosis separately, using:\n\n-   A binary indicator (1 = present, 0 = absent, NA = not applicable).\n-   A count column for how many individuals have that diagnosis.\n-   A percentage column representing the proportion of diagnosed individuals.\n\n2.  Use pivot_longer() after merging to reshape the data into a more compact format, reducing sparsity.\n3.  Ensure consistency in how categorical variables are represented before merging, avoiding unnecessary NAs.\n\n```{r}\n#| Label: setup\n\n# Restore from renv lockfile\nrenv::restore()\n\n# Load libraries\nsuppressPackageStartupMessages({\n  library(dplyr)\n  library(tidyr)\n})\n\n# Disable Python\nknitr::opts_chunk$set(python.reticulate = FALSE)\n\n# Code folding label dynamic set\n# Custom hook to set code-summary based on label\nknitr::opts_hooks$set(label = function(options) {\n  if (!is.null(options$label)) {\n    options$code_summary <- options$label\n  }\n  options\n})\n```\n\n```{r}\n#| label: Simulating Data\n\n# Create a base demographic dataframe with adjusted values\ndf_age <- data.frame(\n  age_cat = c(\"15-24\", \"25-34\", \"35-44\", \"45-54\", \"55-64\", \"65+\"),\n  count_age_cat = c(6, 18, 25, 12, 19, 2),\n  percent_age_cat = c(5.5, 22.0, 30.0, 14.5, 24.5, 3.5)\n)\n\n# Create a separate dataframe for Sex distribution with modified counts\ndf_sex <- data.frame(\n  Sex = c(\"Female\", \"Male\"),\n  count_sex = c(33, 51),\n  percent_sex = c(39.3, 60.7)\n)\n\n# Define separate dataframes for each diagnosis with modified counts and percentages\ndf_adhd <- data.frame(\n  CME_MentalHealthDiagnosis_adhd = c(1, 0, NA),\n  adhd_count = c(10, 3, 55),\n  adhd_percent = c(15.2, 4.5, 80.3)\n)\n\ndf_anxiety <- data.frame(\n  CME_MentalHealthDiagnosis_anxiety = c(1, 0, NA),\n  anxiety_count = c(14, 5, 60),\n  anxiety_percent = c(18.9, 6.8, 74.3)\n)\n\ndf_ocd <- data.frame(\n  CME_MentalHealthDiagnosis_ocd = c(1, 0, NA),\n  ocd_count = c(9, 4, 38),\n  ocd_percent = c(14.7, 7.5, 77.8)\n)\n\n# List the data frames for reference\ndf_list <- list(df_age, df_sex, df_adhd, df_anxiety, df_ocd)\n```\n\n## What NOT to do\n\nIt's tempting to combine all your dataframes and send it off to the next poor chum that needs to work with it. But this creates additional challenge in processing the data.\n\n```{r}\n#| label: Bad idea - binding all dataframes into a blob like this one\n\n# Combining data using bind_rows()\ndf_combined <- bind_rows(df_list)\n```\n\nBinding these dataframes, or otherwise joining, merging, and combining, introduces a lot of `NA` and tricky, awkward structure to deal with later.\n\n```{r}\n#| echo: false\n# View the structure\nknitr::kable(df_combined)\n```\n\n### Best attempt with combined dataframe\n\nLet's assume I received the combined dataframe without access to the component dataframes. As a logic problem, this combined dataframe is challenging to work with for several reasons:\n\n1.  It requires you to work with a more complex structure\n2.  It's more difficult to apply transformations to a single portion of the dataframe\n3.  You'll have to deal with `NA` as a categorical variable vs `NA` as missing data in diagnosis fields\n4.  You'll need to pull out the diagnosis category from the rest of the column name or define it manually\n\nHere is my best attempt at resolving my processing to look like my desired output for plotting/charting/tabling.\n\n### Bad: Combine dataframe → Process after\n\nThis process took me much longer than solving with component dataframes, but it does work and looks tidy.\n\n```{r}\n# Ensure all Variable columns are of type character\ndf_combined <- df_combined %>%\n  mutate(age_cat = as.character(age_cat),\n         Sex = as.character(Sex),\n         CME_MentalHealthDiagnosis_adhd = as.character(CME_MentalHealthDiagnosis_adhd),\n         CME_MentalHealthDiagnosis_anxiety = as.character(CME_MentalHealthDiagnosis_anxiety),\n         CME_MentalHealthDiagnosis_ocd = as.character(CME_MentalHealthDiagnosis_ocd))\n\n# Reshape the data to long format\ndf_combined_long <- df_combined %>%\n  # Reshape age categories\n  select(age_cat, count_age_cat, percent_age_cat) %>%\n  rename(Variable = age_cat, Count = count_age_cat, Percent = percent_age_cat) %>%\n  mutate(Category = \"Age\") %>%\n  filter(!is.na(Variable)) %>%\n  bind_rows(\n    # Reshape sex categories\n    df_combined %>%\n      select(Sex, count_sex, percent_sex) %>%\n      rename(Variable = Sex, Count = count_sex, Percent = percent_sex) %>%\n      mutate(Category = \"Sex\"),\n    # Reshape ADHD categories\n    df_combined %>%\n      select(CME_MentalHealthDiagnosis_adhd, adhd_count, adhd_percent) %>%\n      rename(Variable = CME_MentalHealthDiagnosis_adhd, Count = adhd_count, Percent = adhd_percent) %>%\n      mutate(Category = \"ADHD\"),\n    # Reshape Anxiety categories\n    df_combined %>%\n      select(CME_MentalHealthDiagnosis_anxiety, anxiety_count, anxiety_percent) %>%\n      rename(Variable = CME_MentalHealthDiagnosis_anxiety, Count = anxiety_count, Percent = anxiety_percent) %>%\n      mutate(Category = \"Anxiety\"),\n    # Reshape OCD categories\n    df_combined %>%\n      select(CME_MentalHealthDiagnosis_ocd, ocd_count, ocd_percent) %>%\n      rename(Variable = CME_MentalHealthDiagnosis_ocd, Count = ocd_count, Percent = ocd_percent) %>%\n      mutate(Category = \"OCD\"),\n  ) %>%\n  select(Category, Variable, Count, Percent) %>%\n  filter(!(is.na(Variable) & is.na(Count) & is.na(Percent)))\n```\n\n```{r}\nknitr::kable(df_combined_long)\n```\n\n### Improvements to accomodate more diagnoses\n\nWhat if we have more than 3 diagnoses columns? What if there were... 17? This cleans up our previous code and makes it more dynamic.\n\n```{r}\n# Ensure all Variable columns are of type character\ndf_combined_long_v2 <- df_combined %>%\n  mutate(age_cat = as.character(age_cat),\n         Sex = as.character(Sex))\n\n# Identify diagnosis columns dynamically\ndiagnosis_columns <- grep(\"^CME_MentalHealthDiagnosis_\", names(df_combined_long_v2), value = TRUE)\n\n# Function to reshape diagnosis columns\nreshape_diagnosis <- function(diagnosis_col) {\n  count_col <- paste0(sub(\"CME_MentalHealthDiagnosis_\", \"\", diagnosis_col), \"_count\")\n  percent_col <- paste0(sub(\"CME_MentalHealthDiagnosis_\", \"\", diagnosis_col), \"_percent\")\n  \n  df_combined_long_v2 %>%\n    select(all_of(diagnosis_col), all_of(count_col), all_of(percent_col)) %>%\n    rename(Variable = all_of(diagnosis_col), Count = all_of(count_col), Percent = all_of(percent_col)) %>%\n    mutate(Category = sub(\"CME_MentalHealthDiagnosis_\", \"\", diagnosis_col))\n}\n\n# Reshape the data to long format\ndf_combined_long_v2 <- df_combined_long_v2 %>%\n  # Reshape age categories\n  select(age_cat, count_age_cat, percent_age_cat) %>%\n  rename(Variable = age_cat, Count = count_age_cat, Percent = percent_age_cat) %>%\n  mutate(Category = \"Age\") %>%\n  bind_rows(\n    # Reshape sex categories\n    df_combined_long_v2 %>%\n      select(Sex, count_sex, percent_sex) %>%\n      rename(Variable = Sex, Count = count_sex, Percent = percent_sex) %>%\n      mutate(Category = \"Sex\"),\n    # Reshape all diagnosis categories dynamically\n    bind_rows(lapply(diagnosis_columns, reshape_diagnosis))\n  ) %>%\n  select(Category, Variable, Count, Percent) %>%\n  filter(!(is.na(Variable) & is.na(Count) & is.na(Percent)))\n```\n\n```{r}\nknitr::kable(df_combined_long_v2)\n```\n\n## DO this instead - Reshape initial dataframes before combination\n\nRather than combining all the dataframes right away, we should reshape the component dataframes (the smaller dataframes we need to combine) to match the structure of our expected or desired output first, then combine. This reduces the complexity of our logic by not introducing other odd structure we need to deal with. HOWEVER, this only works if you have received the source dataframes and not a combined one. Work with your upstream collaborators to request the component dataframes if you get a combined dataframe from them.\n\n### Applying transformations to component dataframes before combining\n\nThis process might appear longer in the code, but I promise it will be easier to build if you go through this one dataframe at a time. Some of the logic can be applied to multiple dataframes, so some parts below appear redundant (without turning it into functions).\n\n```{r}\n#| label: Step 1 - Convert df_demo (Age Data) to long format\n\n# Step 1: Convert df_demo (Age Data) to long format\ndf_age_long <- df_age %>%\n  pivot_longer(\n    cols = c(count_age_cat, percent_age_cat),\n    names_to = \"Metric\",\n    values_to = \"Value\"\n  ) %>%\n  mutate(\n    Category = \"Age\",\n    Variable = as.character(age_cat),  # Ensure Variable is character\n    Metric = case_when(\n      grepl(\"count\", Metric) ~ \"Count\",\n      grepl(\"percent\", Metric) ~ \"Percent\"\n    )\n  ) %>%\n  select(Category, Variable, Metric, Value) %>%\n  pivot_wider(names_from = Metric, values_from = Value)\n\nknitr::kable(df_age_long)\n```\n\n```{r}\n#| label: Step 2 - Convert df_sex (Sex Data) to long format\n#| \n# Step 2: Convert df_sex (Sex Data) to long format\ndf_sex_long <- df_sex %>%\n  pivot_longer(\n    cols = c(count_sex, percent_sex),\n    names_to = \"Metric\",\n    values_to = \"Value\"\n  ) %>%\n  mutate(\n    Category = \"Sex\",\n    Variable = as.character(Sex),  # Ensure Variable is character\n    Metric = case_when(\n      grepl(\"count\", Metric) ~ \"Count\",\n      grepl(\"percent\", Metric) ~ \"Percent\"\n    )\n  ) %>%\n  select(Category, Variable, Metric, Value) %>%\n  pivot_wider(names_from = Metric, values_from = Value)\n```\n\n```{r}\n#| label: Step 3 - Convert Diagnosis Dataframes to Long Format\n\n# Step 3: Convert Diagnosis Dataframes to Long Format\nconvert_diagnosis <- function(df, diagnosis_name) {\n  df %>%\n    rename(Variable = 1) %>%  # Rename first column to \"Variable\" (1, 0, NA)\n    mutate(Variable = as.character(Variable)) %>%  # Convert to character to match other tables\n    pivot_longer(\n      cols = ends_with(\"_count\") | ends_with(\"_percent\"),  # Match actual column names\n      names_to = \"Metric\",\n      values_to = \"Value\"\n    ) %>%\n    mutate(\n      Category = diagnosis_name,\n      Metric = case_when(\n        grepl(\"_count\", Metric) ~ \"Count\",\n        grepl(\"_percent\", Metric) ~ \"Percent\"\n      )\n    ) %>%\n    select(Category, Variable, Metric, Value) %>%\n    pivot_wider(names_from = Metric, values_from = Value)\n}\n```\n\n```{r}\n#| label: Convert each diagnosis dataframe, add column name per diagnosis\n\n# Convert each diagnosis dataframe\ndf_adhd_long <- convert_diagnosis(df_adhd, \"ADHD\")\ndf_anxiety_long <- convert_diagnosis(df_anxiety, \"Anxiety\")\ndf_ocd_long <- convert_diagnosis(df_ocd, \"OCD\")\n```\n\n```{r}\n#| label: Step 4 - Combine Everything\n\n# Step 4: Combine Everything\ndf_component_long <- bind_rows(df_age_long, df_sex_long, df_adhd_long, df_anxiety_long, df_ocd_long)\n```\n\n```{r}\n# Display the transformed dataframe\nknitr::kable(df_component_long)\n```\n\n### Optimizing Component Dataframe Method\n\nSimilar improvements for component dataframe reshaping method as the dynamic improvements we made to combined dataframe method: make it so the code can run with any number of diagnoses columns\n\n```{r}\n# Function to convert dataframes to long format\nconvert_to_long <- function(df, category_name) {\n  value_columns <- names(df)[grepl(\"count|percent\", names(df))]\n  df %>%\n    pivot_longer(\n      cols = all_of(value_columns),\n      names_to = \"Metric\",\n      values_to = \"Value\"\n    ) %>%\n    rename(Variable = 1) %>%\n    mutate(\n      Category = category_name,\n      Variable = as.character(Variable),  # Ensure Variable is character\n      Metric = case_when(\n        grepl(\"count\", Metric) ~ \"Count\",\n        grepl(\"percent\", Metric) ~ \"Percent\"\n      )\n    ) %>%\n    select(Category, Variable, Metric, Value) %>%\n    pivot_wider(names_from = Metric, values_from = Value)\n}\n\n# Function to apply convert_to_long to a list of dataframes\nconvert_all_diagnoses <- function(dfs, diagnosis_names) {\n  long_dfs <- Map(convert_to_long, dfs, diagnosis_names)\n  bind_rows(long_dfs)\n}\n\n# List of diagnosis dataframes and their corresponding names\ndiagnosis_dfs <- list(df_adhd, df_anxiety, df_ocd)\ndiagnosis_names <- c(\"ADHD\", \"Anxiety\", \"OCD\")\n\n# Convert each dataframe to long format\ndf_age_long <- convert_to_long(df_age, \"Age\")\ndf_sex_long <- convert_to_long(df_sex, \"Sex\")\ndf_diagnoses_long <- convert_all_diagnoses(diagnosis_dfs, diagnosis_names)\n\n# Combine all long dataframes\ndf_component_long_v2 <- bind_rows(df_age_long, df_sex_long, df_diagnoses_long)\n\n# Filter out rows where Variable, Count, and Percent are all NA\ndf_component_long_v2 <- df_component_long_v2 %>%\n  filter(!(is.na(Variable) & is.na(Count) & is.na(Percent)))\n```\n\n```{r}\n# Display the transformed dataframe\nknitr::kable(df_component_long_v2)\n```\n\n### Interesting Python Example from Alexey Gilman (DOH)\n\n```{python}\n#| eval: false\n\nimport pandas as pd\ndf = pd.read_csv(\"data/combine-df-diff-categoricals.csv\")\n\n\"\"\"\nindex based categories. data format must be consistent with respect to index:\ni.e., rows 0-5 must be category \"age\", rows 6-7 must be category \"sex\"\n\"\"\"\n\n#define categories and their positions and add as column\nctgr = {0:\"age\",\n        1:\"age\",\n        2:\"age\",\n        3:\"age\",\n        4:\"age\",\n        5:\"age\",\n        6:\"sex\",\n        7:\"sex\",\n        8:\"adhd\",\n        9:\"adhd\",\n        10:\"adhd\",\n        11:\"anxiety\",\n        12:\"anxiety\",\n        13:\"anxiety\",\n        14:\"OCD\",\n        15:\"OCD\",\n        16:\"OCD\"\n       }\n\ndf[\"category\"] = pd.Series(ctgr)\n\n#rename redundant category fields\ndf = df.rename(columns = {\"age_cat\":\"subcategory\",\n                          \"Sex\":\"subcategory\",\n                          \"CME_MentalHealthDiagnosis_adhd\":\"subcategory\",\n                          \"CME_MentalHealthDiagnosis_anxiety\":\"subcategory\",\n                          \"CME_MentalHealthDiagnosis_ocd\":\"subcategory\"})\n\n#regex rename percent and count columns\ndf.columns = (df.columns\n              .str.replace(r'(?i).*count.*', 'count', regex=True)\n              .str.replace(r'(?i).*percent.*', 'percent', regex=True))\n\n#merge columns by name \ndf = df.T.groupby(df.columns).first().T\n\n#reorder columns \ndf = df[[\"category\", \"subcategory\", \"count\", \"percent\"]]\n```\n\n## Optional: Write out final table for easier use later\n\n```{r}\n#| eval: false\nreadr::write_csv(df_combined, \"../data/combine-df-diff-categoricals.csv\")\n```\n\n```{r}\n#| eval: false\nreadr::write_csv(df_component_long, \"../data/component-long.csv\")\n```\n","srcMarkdownNoYaml":"\n\n# Reshaping and Combining Multiple DataFrames to Long Format in R\n\n\n::: callout-note\nThe data presented in these examples are not real, but are simulated to appear realistic. No sensitive information is displayed, used, or otherwise exposed here.\n:::\n\n## Problem Description\nWhen working with multiple dataframes containing categorical variables, counts, and percentages, combining them with bind_rows() can introduce a large number of NA values. This happens because each dataframe contains different sets of categorical variables, leading to sparse structures when merged.\n\nFor example:\n\n-   One dataframe may contain age groups and their population counts.\n-   Another may include gender breakdowns but no age information.\n-   Others focus on specific mental health diagnoses, with each diagnosis stored in its own separate dataframe.\n\nAfter using bind_rows(), the result includes many columns filled with NAs because the original dataframes don’t share all the same variables. This makes downstream analysis (such as creating tables and plots) more cumbersome.\n\n## Proposed Solution: Restructuring Before Merging\n\nTo make the data more manageable:\n\n1.  Store each diagnosis separately, using:\n\n-   A binary indicator (1 = present, 0 = absent, NA = not applicable).\n-   A count column for how many individuals have that diagnosis.\n-   A percentage column representing the proportion of diagnosed individuals.\n\n2.  Use pivot_longer() after merging to reshape the data into a more compact format, reducing sparsity.\n3.  Ensure consistency in how categorical variables are represented before merging, avoiding unnecessary NAs.\n\n```{r}\n#| Label: setup\n\n# Restore from renv lockfile\nrenv::restore()\n\n# Load libraries\nsuppressPackageStartupMessages({\n  library(dplyr)\n  library(tidyr)\n})\n\n# Disable Python\nknitr::opts_chunk$set(python.reticulate = FALSE)\n\n# Code folding label dynamic set\n# Custom hook to set code-summary based on label\nknitr::opts_hooks$set(label = function(options) {\n  if (!is.null(options$label)) {\n    options$code_summary <- options$label\n  }\n  options\n})\n```\n\n```{r}\n#| label: Simulating Data\n\n# Create a base demographic dataframe with adjusted values\ndf_age <- data.frame(\n  age_cat = c(\"15-24\", \"25-34\", \"35-44\", \"45-54\", \"55-64\", \"65+\"),\n  count_age_cat = c(6, 18, 25, 12, 19, 2),\n  percent_age_cat = c(5.5, 22.0, 30.0, 14.5, 24.5, 3.5)\n)\n\n# Create a separate dataframe for Sex distribution with modified counts\ndf_sex <- data.frame(\n  Sex = c(\"Female\", \"Male\"),\n  count_sex = c(33, 51),\n  percent_sex = c(39.3, 60.7)\n)\n\n# Define separate dataframes for each diagnosis with modified counts and percentages\ndf_adhd <- data.frame(\n  CME_MentalHealthDiagnosis_adhd = c(1, 0, NA),\n  adhd_count = c(10, 3, 55),\n  adhd_percent = c(15.2, 4.5, 80.3)\n)\n\ndf_anxiety <- data.frame(\n  CME_MentalHealthDiagnosis_anxiety = c(1, 0, NA),\n  anxiety_count = c(14, 5, 60),\n  anxiety_percent = c(18.9, 6.8, 74.3)\n)\n\ndf_ocd <- data.frame(\n  CME_MentalHealthDiagnosis_ocd = c(1, 0, NA),\n  ocd_count = c(9, 4, 38),\n  ocd_percent = c(14.7, 7.5, 77.8)\n)\n\n# List the data frames for reference\ndf_list <- list(df_age, df_sex, df_adhd, df_anxiety, df_ocd)\n```\n\n## What NOT to do\n\nIt's tempting to combine all your dataframes and send it off to the next poor chum that needs to work with it. But this creates additional challenge in processing the data.\n\n```{r}\n#| label: Bad idea - binding all dataframes into a blob like this one\n\n# Combining data using bind_rows()\ndf_combined <- bind_rows(df_list)\n```\n\nBinding these dataframes, or otherwise joining, merging, and combining, introduces a lot of `NA` and tricky, awkward structure to deal with later.\n\n```{r}\n#| echo: false\n# View the structure\nknitr::kable(df_combined)\n```\n\n### Best attempt with combined dataframe\n\nLet's assume I received the combined dataframe without access to the component dataframes. As a logic problem, this combined dataframe is challenging to work with for several reasons:\n\n1.  It requires you to work with a more complex structure\n2.  It's more difficult to apply transformations to a single portion of the dataframe\n3.  You'll have to deal with `NA` as a categorical variable vs `NA` as missing data in diagnosis fields\n4.  You'll need to pull out the diagnosis category from the rest of the column name or define it manually\n\nHere is my best attempt at resolving my processing to look like my desired output for plotting/charting/tabling.\n\n### Bad: Combine dataframe → Process after\n\nThis process took me much longer than solving with component dataframes, but it does work and looks tidy.\n\n```{r}\n# Ensure all Variable columns are of type character\ndf_combined <- df_combined %>%\n  mutate(age_cat = as.character(age_cat),\n         Sex = as.character(Sex),\n         CME_MentalHealthDiagnosis_adhd = as.character(CME_MentalHealthDiagnosis_adhd),\n         CME_MentalHealthDiagnosis_anxiety = as.character(CME_MentalHealthDiagnosis_anxiety),\n         CME_MentalHealthDiagnosis_ocd = as.character(CME_MentalHealthDiagnosis_ocd))\n\n# Reshape the data to long format\ndf_combined_long <- df_combined %>%\n  # Reshape age categories\n  select(age_cat, count_age_cat, percent_age_cat) %>%\n  rename(Variable = age_cat, Count = count_age_cat, Percent = percent_age_cat) %>%\n  mutate(Category = \"Age\") %>%\n  filter(!is.na(Variable)) %>%\n  bind_rows(\n    # Reshape sex categories\n    df_combined %>%\n      select(Sex, count_sex, percent_sex) %>%\n      rename(Variable = Sex, Count = count_sex, Percent = percent_sex) %>%\n      mutate(Category = \"Sex\"),\n    # Reshape ADHD categories\n    df_combined %>%\n      select(CME_MentalHealthDiagnosis_adhd, adhd_count, adhd_percent) %>%\n      rename(Variable = CME_MentalHealthDiagnosis_adhd, Count = adhd_count, Percent = adhd_percent) %>%\n      mutate(Category = \"ADHD\"),\n    # Reshape Anxiety categories\n    df_combined %>%\n      select(CME_MentalHealthDiagnosis_anxiety, anxiety_count, anxiety_percent) %>%\n      rename(Variable = CME_MentalHealthDiagnosis_anxiety, Count = anxiety_count, Percent = anxiety_percent) %>%\n      mutate(Category = \"Anxiety\"),\n    # Reshape OCD categories\n    df_combined %>%\n      select(CME_MentalHealthDiagnosis_ocd, ocd_count, ocd_percent) %>%\n      rename(Variable = CME_MentalHealthDiagnosis_ocd, Count = ocd_count, Percent = ocd_percent) %>%\n      mutate(Category = \"OCD\"),\n  ) %>%\n  select(Category, Variable, Count, Percent) %>%\n  filter(!(is.na(Variable) & is.na(Count) & is.na(Percent)))\n```\n\n```{r}\nknitr::kable(df_combined_long)\n```\n\n### Improvements to accomodate more diagnoses\n\nWhat if we have more than 3 diagnoses columns? What if there were... 17? This cleans up our previous code and makes it more dynamic.\n\n```{r}\n# Ensure all Variable columns are of type character\ndf_combined_long_v2 <- df_combined %>%\n  mutate(age_cat = as.character(age_cat),\n         Sex = as.character(Sex))\n\n# Identify diagnosis columns dynamically\ndiagnosis_columns <- grep(\"^CME_MentalHealthDiagnosis_\", names(df_combined_long_v2), value = TRUE)\n\n# Function to reshape diagnosis columns\nreshape_diagnosis <- function(diagnosis_col) {\n  count_col <- paste0(sub(\"CME_MentalHealthDiagnosis_\", \"\", diagnosis_col), \"_count\")\n  percent_col <- paste0(sub(\"CME_MentalHealthDiagnosis_\", \"\", diagnosis_col), \"_percent\")\n  \n  df_combined_long_v2 %>%\n    select(all_of(diagnosis_col), all_of(count_col), all_of(percent_col)) %>%\n    rename(Variable = all_of(diagnosis_col), Count = all_of(count_col), Percent = all_of(percent_col)) %>%\n    mutate(Category = sub(\"CME_MentalHealthDiagnosis_\", \"\", diagnosis_col))\n}\n\n# Reshape the data to long format\ndf_combined_long_v2 <- df_combined_long_v2 %>%\n  # Reshape age categories\n  select(age_cat, count_age_cat, percent_age_cat) %>%\n  rename(Variable = age_cat, Count = count_age_cat, Percent = percent_age_cat) %>%\n  mutate(Category = \"Age\") %>%\n  bind_rows(\n    # Reshape sex categories\n    df_combined_long_v2 %>%\n      select(Sex, count_sex, percent_sex) %>%\n      rename(Variable = Sex, Count = count_sex, Percent = percent_sex) %>%\n      mutate(Category = \"Sex\"),\n    # Reshape all diagnosis categories dynamically\n    bind_rows(lapply(diagnosis_columns, reshape_diagnosis))\n  ) %>%\n  select(Category, Variable, Count, Percent) %>%\n  filter(!(is.na(Variable) & is.na(Count) & is.na(Percent)))\n```\n\n```{r}\nknitr::kable(df_combined_long_v2)\n```\n\n## DO this instead - Reshape initial dataframes before combination\n\nRather than combining all the dataframes right away, we should reshape the component dataframes (the smaller dataframes we need to combine) to match the structure of our expected or desired output first, then combine. This reduces the complexity of our logic by not introducing other odd structure we need to deal with. HOWEVER, this only works if you have received the source dataframes and not a combined one. Work with your upstream collaborators to request the component dataframes if you get a combined dataframe from them.\n\n### Applying transformations to component dataframes before combining\n\nThis process might appear longer in the code, but I promise it will be easier to build if you go through this one dataframe at a time. Some of the logic can be applied to multiple dataframes, so some parts below appear redundant (without turning it into functions).\n\n```{r}\n#| label: Step 1 - Convert df_demo (Age Data) to long format\n\n# Step 1: Convert df_demo (Age Data) to long format\ndf_age_long <- df_age %>%\n  pivot_longer(\n    cols = c(count_age_cat, percent_age_cat),\n    names_to = \"Metric\",\n    values_to = \"Value\"\n  ) %>%\n  mutate(\n    Category = \"Age\",\n    Variable = as.character(age_cat),  # Ensure Variable is character\n    Metric = case_when(\n      grepl(\"count\", Metric) ~ \"Count\",\n      grepl(\"percent\", Metric) ~ \"Percent\"\n    )\n  ) %>%\n  select(Category, Variable, Metric, Value) %>%\n  pivot_wider(names_from = Metric, values_from = Value)\n\nknitr::kable(df_age_long)\n```\n\n```{r}\n#| label: Step 2 - Convert df_sex (Sex Data) to long format\n#| \n# Step 2: Convert df_sex (Sex Data) to long format\ndf_sex_long <- df_sex %>%\n  pivot_longer(\n    cols = c(count_sex, percent_sex),\n    names_to = \"Metric\",\n    values_to = \"Value\"\n  ) %>%\n  mutate(\n    Category = \"Sex\",\n    Variable = as.character(Sex),  # Ensure Variable is character\n    Metric = case_when(\n      grepl(\"count\", Metric) ~ \"Count\",\n      grepl(\"percent\", Metric) ~ \"Percent\"\n    )\n  ) %>%\n  select(Category, Variable, Metric, Value) %>%\n  pivot_wider(names_from = Metric, values_from = Value)\n```\n\n```{r}\n#| label: Step 3 - Convert Diagnosis Dataframes to Long Format\n\n# Step 3: Convert Diagnosis Dataframes to Long Format\nconvert_diagnosis <- function(df, diagnosis_name) {\n  df %>%\n    rename(Variable = 1) %>%  # Rename first column to \"Variable\" (1, 0, NA)\n    mutate(Variable = as.character(Variable)) %>%  # Convert to character to match other tables\n    pivot_longer(\n      cols = ends_with(\"_count\") | ends_with(\"_percent\"),  # Match actual column names\n      names_to = \"Metric\",\n      values_to = \"Value\"\n    ) %>%\n    mutate(\n      Category = diagnosis_name,\n      Metric = case_when(\n        grepl(\"_count\", Metric) ~ \"Count\",\n        grepl(\"_percent\", Metric) ~ \"Percent\"\n      )\n    ) %>%\n    select(Category, Variable, Metric, Value) %>%\n    pivot_wider(names_from = Metric, values_from = Value)\n}\n```\n\n```{r}\n#| label: Convert each diagnosis dataframe, add column name per diagnosis\n\n# Convert each diagnosis dataframe\ndf_adhd_long <- convert_diagnosis(df_adhd, \"ADHD\")\ndf_anxiety_long <- convert_diagnosis(df_anxiety, \"Anxiety\")\ndf_ocd_long <- convert_diagnosis(df_ocd, \"OCD\")\n```\n\n```{r}\n#| label: Step 4 - Combine Everything\n\n# Step 4: Combine Everything\ndf_component_long <- bind_rows(df_age_long, df_sex_long, df_adhd_long, df_anxiety_long, df_ocd_long)\n```\n\n```{r}\n# Display the transformed dataframe\nknitr::kable(df_component_long)\n```\n\n### Optimizing Component Dataframe Method\n\nSimilar improvements for component dataframe reshaping method as the dynamic improvements we made to combined dataframe method: make it so the code can run with any number of diagnoses columns\n\n```{r}\n# Function to convert dataframes to long format\nconvert_to_long <- function(df, category_name) {\n  value_columns <- names(df)[grepl(\"count|percent\", names(df))]\n  df %>%\n    pivot_longer(\n      cols = all_of(value_columns),\n      names_to = \"Metric\",\n      values_to = \"Value\"\n    ) %>%\n    rename(Variable = 1) %>%\n    mutate(\n      Category = category_name,\n      Variable = as.character(Variable),  # Ensure Variable is character\n      Metric = case_when(\n        grepl(\"count\", Metric) ~ \"Count\",\n        grepl(\"percent\", Metric) ~ \"Percent\"\n      )\n    ) %>%\n    select(Category, Variable, Metric, Value) %>%\n    pivot_wider(names_from = Metric, values_from = Value)\n}\n\n# Function to apply convert_to_long to a list of dataframes\nconvert_all_diagnoses <- function(dfs, diagnosis_names) {\n  long_dfs <- Map(convert_to_long, dfs, diagnosis_names)\n  bind_rows(long_dfs)\n}\n\n# List of diagnosis dataframes and their corresponding names\ndiagnosis_dfs <- list(df_adhd, df_anxiety, df_ocd)\ndiagnosis_names <- c(\"ADHD\", \"Anxiety\", \"OCD\")\n\n# Convert each dataframe to long format\ndf_age_long <- convert_to_long(df_age, \"Age\")\ndf_sex_long <- convert_to_long(df_sex, \"Sex\")\ndf_diagnoses_long <- convert_all_diagnoses(diagnosis_dfs, diagnosis_names)\n\n# Combine all long dataframes\ndf_component_long_v2 <- bind_rows(df_age_long, df_sex_long, df_diagnoses_long)\n\n# Filter out rows where Variable, Count, and Percent are all NA\ndf_component_long_v2 <- df_component_long_v2 %>%\n  filter(!(is.na(Variable) & is.na(Count) & is.na(Percent)))\n```\n\n```{r}\n# Display the transformed dataframe\nknitr::kable(df_component_long_v2)\n```\n\n### Interesting Python Example from Alexey Gilman (DOH)\n\n```{python}\n#| eval: false\n\nimport pandas as pd\ndf = pd.read_csv(\"data/combine-df-diff-categoricals.csv\")\n\n\"\"\"\nindex based categories. data format must be consistent with respect to index:\ni.e., rows 0-5 must be category \"age\", rows 6-7 must be category \"sex\"\n\"\"\"\n\n#define categories and their positions and add as column\nctgr = {0:\"age\",\n        1:\"age\",\n        2:\"age\",\n        3:\"age\",\n        4:\"age\",\n        5:\"age\",\n        6:\"sex\",\n        7:\"sex\",\n        8:\"adhd\",\n        9:\"adhd\",\n        10:\"adhd\",\n        11:\"anxiety\",\n        12:\"anxiety\",\n        13:\"anxiety\",\n        14:\"OCD\",\n        15:\"OCD\",\n        16:\"OCD\"\n       }\n\ndf[\"category\"] = pd.Series(ctgr)\n\n#rename redundant category fields\ndf = df.rename(columns = {\"age_cat\":\"subcategory\",\n                          \"Sex\":\"subcategory\",\n                          \"CME_MentalHealthDiagnosis_adhd\":\"subcategory\",\n                          \"CME_MentalHealthDiagnosis_anxiety\":\"subcategory\",\n                          \"CME_MentalHealthDiagnosis_ocd\":\"subcategory\"})\n\n#regex rename percent and count columns\ndf.columns = (df.columns\n              .str.replace(r'(?i).*count.*', 'count', regex=True)\n              .str.replace(r'(?i).*percent.*', 'percent', regex=True))\n\n#merge columns by name \ndf = df.T.groupby(df.columns).first().T\n\n#reorder columns \ndf = df[[\"category\", \"subcategory\", \"count\", \"percent\"]]\n```\n\n## Optional: Write out final table for easier use later\n\n```{r}\n#| eval: false\nreadr::write_csv(df_combined, \"../data/combine-df-diff-categoricals.csv\")\n```\n\n```{r}\n#| eval: false\nreadr::write_csv(df_component_long, \"../data/component-long.csv\")\n```\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":true,"code-overflow":"wrap","code-link":false,"code-line-numbers":false,"code-tools":true,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","toc":true,"filters":["../code-summary-chunk-label.lua"],"output-file":"dataframes-bind-rows-pivot.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.6.40","theme":"default","code-summary":"Show code"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}