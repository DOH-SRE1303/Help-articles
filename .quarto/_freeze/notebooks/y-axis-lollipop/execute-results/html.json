{
  "hash": "1b26f86c276b19ade5396ea6988ebd81",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: Recreating a Y-axis lollipop chart from a report on SUDORS data\ndate: \"2024-03-02\"\nimage: ../images/lollipop-example.png\ncategories: \"data vis\"\n---\n\n\n\n\n## Starting example\nThis notebook contains a best approximation for the following example chart using `ggplot2`.\n\n<p align=\"left\">\n  <img src=\"../images/Lollipop-example.png\" alt=\"Example y-axis lollipop chart\">\n</p>\n\n\n### Load required packages\n\n\n\n\n::: {.cell Label='setup'}\n\n```{.r .cell-code  code-summary=\"Show Setup\"}\n# Restore from renv lockfile with sink to avoid annoying unsuppressable messages\n# Like 'The library is already synchronized with the lockfile.'\n# use dev/null for linux\nsink(\"NUL\")\nrenv::restore()\nsink()\n\n# Load libraries\nsuppressPackageStartupMessages({\n  library(ggplot2)\n  library(dplyr)\n})\n```\n:::\n\n\n\n\n### Simulate data\nOur data needs to contain at least two columns:\n\n1. A column of text values for the labels\n2. A column of data values (i.e. percents).\n\n\n\n\n::: {.cell Label='Simulate Data'}\n\n```{.r .cell-code  code-summary=\"Show data simulation code\"}\n# Simple simulated dataframe with labels and values columns\ndata <- data.frame(\n  Category = c(\"Current treatment for substance use disorder(s)¹¹\",\n               \"Fatal drug use witnessed\",\n               \"Mental health diagnosis\",\n               \"Potential bystander present¹²\",\n               \"Prior overdose\",\n               \"Recent release from institutional setting¹³\"),\n  Percentage = c(4.8, 10.1, 28.6, 53.2, 7.9, 10.2)\n)\n```\n:::\n\n\n\n\n## Data, Chart, and Labels Preparation\nSome slight modifications were necessary to position elements and labels for mathcing the original chart.\n\n\n\n\n::: {.cell Label='Data transformations and chart modification prep'}\n\n```{.r .cell-code  code-summary=\"Show transformations code\"}\n# Sort data to match order of example chart\ndata <- data %>%\n  arrange(desc(Category)) %>%  # Reverse alphabetical order\n  mutate(Y_Pos = row_number() - 0.3)  # Adjust label positions slightly downward\n\n# Define x-axis limits with buffer space for labels\nx_max <- max(data$Percentage) + 10  # Add buffer space\n\n# Recreate shorter segments by dynamically adjusting x start point\nmin_x_start <- min(data[[\"Percentage\"]], na.rm = TRUE) * 0.5  # Dynamic start position\n```\n:::\n\n\n\n\n## Chart Recreation\n\n\n\n\n::: {.cell Label='Final recreated y-axis lollipop chart'}\n\n```{.r .cell-code  code-summary=\"Show final lollipop chart code\"}\n# Final y-axis lollipop chart code\nggplot(data, aes(x = Percentage, y = reorder(Category, desc(Category)))) +\n  # Thicker tha default lollipop segment lines starting from a fixed x-location\n  geom_segment(aes(x = min_x_start, xend = Percentage, yend = Category), color = \"#8b3d88\", linewidth = 2) +\n  # Lollipop points\n  geom_point(color = \"#8b3d88\", size = 4) +\n  # Percentage labels to the right of points\n  geom_text(aes(label = paste0(Percentage, \"%\")), hjust = -0.3, \n            color = \"gray20\", size = 4) +\n  # Category labels positioned BELOW each line, aligned with segment start\n  geom_text(aes(x = min_x_start, y = Y_Pos, label = Category), hjust = 0, \n            color = \"gray20\", size = 4) +\n  # Theme modifications\n  theme_minimal() +\n  labs(x = NULL, y = NULL, \n       title = \"Lollipop Chart Example\",\n       subtitle = \"Replicating the provided visual in ggplot2\") +\n  xlim(min_x_start, x_max) +  # Ensure enough space for labels and a clean cutoff\n  theme(\n    axis.text.y = element_blank(),  # Remove default y-axis labels\n    axis.text.x = element_blank(), \n    axis.ticks.x = element_blank(), \n    panel.grid.major.x = element_blank(),  # Remove x-axis gridlines\n    panel.grid.major.y = element_blank(),  # Remove y-axis gridlines\n    panel.grid.minor = element_blank()\n  )\n```\n\n::: {.cell-output-display}\n![](y-axis-lollipop_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\n\n\n## Functionizing our `ggplot2` code for reuse\n\n\n\n\n::: {.cell Label='Functionized chart code'}\n\n```{.r .cell-code  code-summary=\"Show lollipop chart function\"}\n# Required packages\n# library(ggplot2)\n# library(dplyr)\n\ncreate_y_lollipop <- function(df, percentage_col, label_col, title = \"Y-axis Lollipop Chart\", subtitle = \"Generated dynamically from input dataframe\") {\n  # Ensure columns exist\n  if (!(percentage_col %in% names(df)) | !(label_col %in% names(df))) {\n    stop(\"Specified columns not found in dataframe.\")\n  }\n  \n  # Prepare data: Sort labels in reverse alphabetical order\n  df <- df %>%\n    arrange(desc(.data[[label_col]])) %>%\n    mutate(Y_Pos = row_number() - 0.3)\n  \n  # Define x-axis max limit for buffer\n  x_max <- max(df[[percentage_col]], na.rm = TRUE) + 10\n  \n  # Dynamic start position\n  min_x_start <- min(df[[percentage_col]], na.rm = TRUE) * 0.5  \n  \n  # Create lollipop chart\n  ggplot(df, aes(x = .data[[percentage_col]], y = reorder(.data[[label_col]], desc(.data[[label_col]])))) +\n    geom_segment(aes(x = min_x_start, xend = .data[[percentage_col]], yend = .data[[label_col]]), \n                 color = \"#8b3d88\", linewidth = 2) +\n    geom_point(color = \"#8b3d88\", size = 4) +\n    geom_text(aes(label = paste0(.data[[percentage_col]], \"%\")), \n              hjust = -0.3, color = \"gray20\", size = 4) +\n    geom_text(aes(x = min_x_start, y = Y_Pos, label = .data[[label_col]]), \n              hjust = 0, color = \"gray20\", size = 4) +\n    theme_minimal() +\n    labs(x = NULL, y = NULL, \n         title = title,\n         subtitle = subtitle) +\n    xlim(min_x_start, x_max) +\n    theme(\n      axis.text.y = element_blank(),\n      axis.text.x = element_blank(),\n      axis.ticks.x = element_blank(),\n      panel.grid.major.x = element_blank(),\n      panel.grid.major.y = element_blank(),\n      panel.grid.minor = element_blank()\n    )\n}\n```\n:::\n\n\n\n\nThis functionized `ggplot2` code should produce the same output as above but with a reusable set of input parameters.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\n# Call the function with the dataset\ncreate_y_lollipop(data, percentage_col = \"Percentage\", label_col = \"Category\")\n```\n\n::: {.cell-output-display}\n![](y-axis-lollipop_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "y-axis-lollipop_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}