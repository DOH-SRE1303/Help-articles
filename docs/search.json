[
  {
    "objectID": "notebooks/y-axis-lollipop.html",
    "href": "notebooks/y-axis-lollipop.html",
    "title": "",
    "section": "",
    "text": "CodeShow All CodeHide All CodeView Source"
  },
  {
    "objectID": "notebooks/y-axis-lollipop.html#starting-example",
    "href": "notebooks/y-axis-lollipop.html#starting-example",
    "title": "",
    "section": "Starting example",
    "text": "Starting example\nThis notebook contains a best approximation for the following example chart using ggplot2.\n\n\n\n\nLoad required packages\n\n\nShow Setup\n# Restore from renv lockfile with sink to avoid annoying unsuppressable messages\n# Like 'The library is already synchronized with the lockfile.'\n# use dev/null for linux\nsink(\"NUL\")\nrenv::restore()\nsink()\n\n# Load libraries\nsuppressPackageStartupMessages({\n  library(ggplot2)\n  library(dplyr)\n})\n\n\n\n\nSimulate data\nOur data needs to contain at least two columns:\n\nA column of text values for the labels\nA column of data values (i.e. percents).\n\n\n\nShow data simulation code\n# Simple simulated dataframe with labels and values columns\ndata &lt;- data.frame(\n  Category = c(\"Current treatment for substance use disorder(s)¹¹\",\n               \"Fatal drug use witnessed\",\n               \"Mental health diagnosis\",\n               \"Potential bystander present¹²\",\n               \"Prior overdose\",\n               \"Recent release from institutional setting¹³\"),\n  Percentage = c(4.8, 10.1, 28.6, 53.2, 7.9, 10.2)\n)"
  },
  {
    "objectID": "notebooks/y-axis-lollipop.html#data-chart-and-labels-preparation",
    "href": "notebooks/y-axis-lollipop.html#data-chart-and-labels-preparation",
    "title": "",
    "section": "Data, Chart, and Labels Preparation",
    "text": "Data, Chart, and Labels Preparation\nSome slight modifications were necessary to position elements and labels for mathcing the original chart.\n\n\nShow transformations code\n# Sort data to match order of example chart\ndata &lt;- data %&gt;%\n  arrange(desc(Category)) %&gt;%  # Reverse alphabetical order\n  mutate(Y_Pos = row_number() - 0.3)  # Adjust label positions slightly downward\n\n# Define x-axis limits with buffer space for labels\nx_max &lt;- max(data$Percentage) + 10  # Add buffer space\n\n# Recreate shorter segments by dynamically adjusting x start point\nmin_x_start &lt;- min(data[[\"Percentage\"]], na.rm = TRUE) * 0.5  # Dynamic start position"
  },
  {
    "objectID": "notebooks/y-axis-lollipop.html#chart-recreation",
    "href": "notebooks/y-axis-lollipop.html#chart-recreation",
    "title": "",
    "section": "Chart Recreation",
    "text": "Chart Recreation\n\n\nShow final lollipop chart code\n# Final y-axis lollipop chart code\nggplot(data, aes(x = Percentage, y = reorder(Category, desc(Category)))) +\n  # Thicker tha default lollipop segment lines starting from a fixed x-location\n  geom_segment(aes(x = min_x_start, xend = Percentage, yend = Category), color = \"#8b3d88\", linewidth = 2) +\n  # Lollipop points\n  geom_point(color = \"#8b3d88\", size = 4) +\n  # Percentage labels to the right of points\n  geom_text(aes(label = paste0(Percentage, \"%\")), hjust = -0.3, \n            color = \"gray20\", size = 4) +\n  # Category labels positioned BELOW each line, aligned with segment start\n  geom_text(aes(x = min_x_start, y = Y_Pos, label = Category), hjust = 0, \n            color = \"gray20\", size = 4) +\n  # Theme modifications\n  theme_minimal() +\n  labs(x = NULL, y = NULL, \n       title = \"Lollipop Chart Example\",\n       subtitle = \"Replicating the provided visual in ggplot2\") +\n  xlim(min_x_start, x_max) +  # Ensure enough space for labels and a clean cutoff\n  theme(\n    axis.text.y = element_blank(),  # Remove default y-axis labels\n    axis.text.x = element_blank(), \n    axis.ticks.x = element_blank(), \n    panel.grid.major.x = element_blank(),  # Remove x-axis gridlines\n    panel.grid.major.y = element_blank(),  # Remove y-axis gridlines\n    panel.grid.minor = element_blank()\n  )"
  },
  {
    "objectID": "notebooks/y-axis-lollipop.html#functionizing-our-ggplot2-code-for-reuse",
    "href": "notebooks/y-axis-lollipop.html#functionizing-our-ggplot2-code-for-reuse",
    "title": "",
    "section": "Functionizing our ggplot2 code for reuse",
    "text": "Functionizing our ggplot2 code for reuse\n\n\nShow lollipop chart function\n# Required packages\n# library(ggplot2)\n# library(dplyr)\n\ncreate_y_lollipop &lt;- function(df, percentage_col, label_col, title = \"Y-axis Lollipop Chart\", subtitle = \"Generated dynamically from input dataframe\") {\n  # Ensure columns exist\n  if (!(percentage_col %in% names(df)) | !(label_col %in% names(df))) {\n    stop(\"Specified columns not found in dataframe.\")\n  }\n  \n  # Prepare data: Sort labels in reverse alphabetical order\n  df &lt;- df %&gt;%\n    arrange(desc(.data[[label_col]])) %&gt;%\n    mutate(Y_Pos = row_number() - 0.3)\n  \n  # Define x-axis max limit for buffer\n  x_max &lt;- max(df[[percentage_col]], na.rm = TRUE) + 10\n  \n  # Dynamic start position\n  min_x_start &lt;- min(df[[percentage_col]], na.rm = TRUE) * 0.5  \n  \n  # Create lollipop chart\n  ggplot(df, aes(x = .data[[percentage_col]], y = reorder(.data[[label_col]], desc(.data[[label_col]])))) +\n    geom_segment(aes(x = min_x_start, xend = .data[[percentage_col]], yend = .data[[label_col]]), \n                 color = \"#8b3d88\", linewidth = 2) +\n    geom_point(color = \"#8b3d88\", size = 4) +\n    geom_text(aes(label = paste0(.data[[percentage_col]], \"%\")), \n              hjust = -0.3, color = \"gray20\", size = 4) +\n    geom_text(aes(x = min_x_start, y = Y_Pos, label = .data[[label_col]]), \n              hjust = 0, color = \"gray20\", size = 4) +\n    theme_minimal() +\n    labs(x = NULL, y = NULL, \n         title = title,\n         subtitle = subtitle) +\n    xlim(min_x_start, x_max) +\n    theme(\n      axis.text.y = element_blank(),\n      axis.text.x = element_blank(),\n      axis.ticks.x = element_blank(),\n      panel.grid.major.x = element_blank(),\n      panel.grid.major.y = element_blank(),\n      panel.grid.minor = element_blank()\n    )\n}\n\n\nThis functionized ggplot2 code should produce the same output as above but with a reusable set of input parameters.\n\n# Call the function with the dataset\ncreate_y_lollipop(data, percentage_col = \"Percentage\", label_col = \"Category\")"
  },
  {
    "objectID": "notebooks/reshape-combine-multiple-df-long-format.html",
    "href": "notebooks/reshape-combine-multiple-df-long-format.html",
    "title": "",
    "section": "",
    "text": "CodeShow All CodeHide All CodeView Source"
  },
  {
    "objectID": "notebooks/reshape-combine-multiple-df-long-format.html#problem-description",
    "href": "notebooks/reshape-combine-multiple-df-long-format.html#problem-description",
    "title": "",
    "section": "Problem Description",
    "text": "Problem Description\nWhen working with multiple dataframes containing categorical variables, counts, and percentages, combining them with bind_rows() can introduce a large number of NA values. This happens because each dataframe contains different sets of categorical variables, leading to sparse structures when merged.\nFor example:\n\nOne dataframe may contain age groups and their population counts.\nAnother may include gender breakdowns but no age information.\nOthers focus on specific mental health diagnoses, with each diagnosis stored in its own separate dataframe.\n\nAfter using bind_rows(), the result includes many columns filled with NAs because the original dataframes don’t share all the same variables. This makes downstream analysis (such as creating tables and plots) more cumbersome."
  },
  {
    "objectID": "notebooks/reshape-combine-multiple-df-long-format.html#proposed-solution-restructuring-before-merging",
    "href": "notebooks/reshape-combine-multiple-df-long-format.html#proposed-solution-restructuring-before-merging",
    "title": "",
    "section": "Proposed Solution: Restructuring Before Merging",
    "text": "Proposed Solution: Restructuring Before Merging\nTo make the data more manageable:\n\nStore each diagnosis separately, using:\n\n\nA binary indicator (1 = present, 0 = absent, NA = not applicable).\nA count column for how many individuals have that diagnosis.\nA percentage column representing the proportion of diagnosed individuals.\n\n\nUse pivot_longer() after merging to reshape the data into a more compact format, reducing sparsity.\nEnsure consistency in how categorical variables are represented before merging, avoiding unnecessary NAs.\n\n\n\nShow code\n# Restore from renv lockfile\nrenv::restore()\n\n\n- The library is already synchronized with the lockfile.\n\n\nShow code\n# Load libraries\nsuppressPackageStartupMessages({\n  library(dplyr)\n  library(tidyr)\n})\n\n# Disable Python\nknitr::opts_chunk$set(python.reticulate = FALSE)\n\n# Code folding label dynamic set\n# Custom hook to set code-summary based on label\nknitr::opts_hooks$set(label = function(options) {\n  if (!is.null(options$label)) {\n    options$code_summary &lt;- options$label\n  }\n  options\n})\n\n\n\n\nShow code\n# Create a base demographic dataframe with adjusted values\ndf_age &lt;- data.frame(\n  age_cat = c(\"15-24\", \"25-34\", \"35-44\", \"45-54\", \"55-64\", \"65+\"),\n  count_age_cat = c(6, 18, 25, 12, 19, 2),\n  percent_age_cat = c(5.5, 22.0, 30.0, 14.5, 24.5, 3.5)\n)\n\n# Create a separate dataframe for Sex distribution with modified counts\ndf_sex &lt;- data.frame(\n  Sex = c(\"Female\", \"Male\"),\n  count_sex = c(33, 51),\n  percent_sex = c(39.3, 60.7)\n)\n\n# Define separate dataframes for each diagnosis with modified counts and percentages\ndf_adhd &lt;- data.frame(\n  CME_MentalHealthDiagnosis_adhd = c(1, 0, NA),\n  adhd_count = c(10, 3, 55),\n  adhd_percent = c(15.2, 4.5, 80.3)\n)\n\ndf_anxiety &lt;- data.frame(\n  CME_MentalHealthDiagnosis_anxiety = c(1, 0, NA),\n  anxiety_count = c(14, 5, 60),\n  anxiety_percent = c(18.9, 6.8, 74.3)\n)\n\ndf_ocd &lt;- data.frame(\n  CME_MentalHealthDiagnosis_ocd = c(1, 0, NA),\n  ocd_count = c(9, 4, 38),\n  ocd_percent = c(14.7, 7.5, 77.8)\n)\n\n# List the data frames for reference\ndf_list &lt;- list(df_age, df_sex, df_adhd, df_anxiety, df_ocd)"
  },
  {
    "objectID": "notebooks/reshape-combine-multiple-df-long-format.html#what-not-to-do",
    "href": "notebooks/reshape-combine-multiple-df-long-format.html#what-not-to-do",
    "title": "",
    "section": "What NOT to do",
    "text": "What NOT to do\nIt’s tempting to combine all your dataframes and send it off to the next poor chum that needs to work with it. But this creates additional challenge in processing the data.\n\n\nShow code\n# Combining data using bind_rows()\ndf_combined &lt;- bind_rows(df_list)\n\n\nBinding these dataframes, or otherwise joining, merging, and combining, introduces a lot of NA and tricky, awkward structure to deal with later.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nage_cat\ncount_age_cat\npercent_age_cat\nSex\ncount_sex\npercent_sex\nCME_MentalHealthDiagnosis_adhd\nadhd_count\nadhd_percent\nCME_MentalHealthDiagnosis_anxiety\nanxiety_count\nanxiety_percent\nCME_MentalHealthDiagnosis_ocd\nocd_count\nocd_percent\n\n\n\n\n15-24\n6\n5.5\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\n\n\n25-34\n18\n22.0\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\n\n\n35-44\n25\n30.0\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\n\n\n45-54\n12\n14.5\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\n\n\n55-64\n19\n24.5\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\n\n\n65+\n2\n3.5\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\n\n\nNA\nNA\nNA\nFemale\n33\n39.3\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\n\n\nNA\nNA\nNA\nMale\n51\n60.7\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\n\n\nNA\nNA\nNA\nNA\nNA\nNA\n1\n10\n15.2\nNA\nNA\nNA\nNA\nNA\nNA\n\n\nNA\nNA\nNA\nNA\nNA\nNA\n0\n3\n4.5\nNA\nNA\nNA\nNA\nNA\nNA\n\n\nNA\nNA\nNA\nNA\nNA\nNA\nNA\n55\n80.3\nNA\nNA\nNA\nNA\nNA\nNA\n\n\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\n1\n14\n18.9\nNA\nNA\nNA\n\n\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\n0\n5\n6.8\nNA\nNA\nNA\n\n\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\n60\n74.3\nNA\nNA\nNA\n\n\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\n1\n9\n14.7\n\n\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\n0\n4\n7.5\n\n\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\n38\n77.8\n\n\n\n\n\n\nBest attempt with combined dataframe\nLet’s assume I received the combined dataframe without access to the component dataframes. As a logic problem, this combined dataframe is challenging to work with for several reasons:\n\nIt requires you to work with a more complex structure\nIt’s more difficult to apply transformations to a single portion of the dataframe\nYou’ll have to deal with NA as a categorical variable vs NA as missing data in diagnosis fields\nYou’ll need to pull out the diagnosis category from the rest of the column name or define it manually\n\nHere is my best attempt at resolving my processing to look like my desired output for plotting/charting/tabling.\n\n\nBad: Combine dataframe → Process after\nThis process took me much longer than solving with component dataframes, but it does work and looks tidy.\n\n\nShow code\n# Ensure all Variable columns are of type character\ndf_combined &lt;- df_combined %&gt;%\n  mutate(age_cat = as.character(age_cat),\n         Sex = as.character(Sex),\n         CME_MentalHealthDiagnosis_adhd = as.character(CME_MentalHealthDiagnosis_adhd),\n         CME_MentalHealthDiagnosis_anxiety = as.character(CME_MentalHealthDiagnosis_anxiety),\n         CME_MentalHealthDiagnosis_ocd = as.character(CME_MentalHealthDiagnosis_ocd))\n\n# Reshape the data to long format\ndf_combined_long &lt;- df_combined %&gt;%\n  # Reshape age categories\n  select(age_cat, count_age_cat, percent_age_cat) %&gt;%\n  rename(Variable = age_cat, Count = count_age_cat, Percent = percent_age_cat) %&gt;%\n  mutate(Category = \"Age\") %&gt;%\n  filter(!is.na(Variable)) %&gt;%\n  bind_rows(\n    # Reshape sex categories\n    df_combined %&gt;%\n      select(Sex, count_sex, percent_sex) %&gt;%\n      rename(Variable = Sex, Count = count_sex, Percent = percent_sex) %&gt;%\n      mutate(Category = \"Sex\"),\n    # Reshape ADHD categories\n    df_combined %&gt;%\n      select(CME_MentalHealthDiagnosis_adhd, adhd_count, adhd_percent) %&gt;%\n      rename(Variable = CME_MentalHealthDiagnosis_adhd, Count = adhd_count, Percent = adhd_percent) %&gt;%\n      mutate(Category = \"ADHD\"),\n    # Reshape Anxiety categories\n    df_combined %&gt;%\n      select(CME_MentalHealthDiagnosis_anxiety, anxiety_count, anxiety_percent) %&gt;%\n      rename(Variable = CME_MentalHealthDiagnosis_anxiety, Count = anxiety_count, Percent = anxiety_percent) %&gt;%\n      mutate(Category = \"Anxiety\"),\n    # Reshape OCD categories\n    df_combined %&gt;%\n      select(CME_MentalHealthDiagnosis_ocd, ocd_count, ocd_percent) %&gt;%\n      rename(Variable = CME_MentalHealthDiagnosis_ocd, Count = ocd_count, Percent = ocd_percent) %&gt;%\n      mutate(Category = \"OCD\"),\n  ) %&gt;%\n  select(Category, Variable, Count, Percent) %&gt;%\n  filter(!(is.na(Variable) & is.na(Count) & is.na(Percent)))\n\n\n\n\nShow code\nknitr::kable(df_combined_long)\n\n\n\n\n\nCategory\nVariable\nCount\nPercent\n\n\n\n\nAge\n15-24\n6\n5.5\n\n\nAge\n25-34\n18\n22.0\n\n\nAge\n35-44\n25\n30.0\n\n\nAge\n45-54\n12\n14.5\n\n\nAge\n55-64\n19\n24.5\n\n\nAge\n65+\n2\n3.5\n\n\nSex\nFemale\n33\n39.3\n\n\nSex\nMale\n51\n60.7\n\n\nADHD\n1\n10\n15.2\n\n\nADHD\n0\n3\n4.5\n\n\nADHD\nNA\n55\n80.3\n\n\nAnxiety\n1\n14\n18.9\n\n\nAnxiety\n0\n5\n6.8\n\n\nAnxiety\nNA\n60\n74.3\n\n\nOCD\n1\n9\n14.7\n\n\nOCD\n0\n4\n7.5\n\n\nOCD\nNA\n38\n77.8\n\n\n\n\n\n\n\nImprovements to accomodate more diagnoses\nWhat if we have more than 3 diagnoses columns? What if there were… 17? This cleans up our previous code and makes it more dynamic.\n\n\nShow code\n# Ensure all Variable columns are of type character\ndf_combined_long_v2 &lt;- df_combined %&gt;%\n  mutate(age_cat = as.character(age_cat),\n         Sex = as.character(Sex))\n\n# Identify diagnosis columns dynamically\ndiagnosis_columns &lt;- grep(\"^CME_MentalHealthDiagnosis_\", names(df_combined_long_v2), value = TRUE)\n\n# Function to reshape diagnosis columns\nreshape_diagnosis &lt;- function(diagnosis_col) {\n  count_col &lt;- paste0(sub(\"CME_MentalHealthDiagnosis_\", \"\", diagnosis_col), \"_count\")\n  percent_col &lt;- paste0(sub(\"CME_MentalHealthDiagnosis_\", \"\", diagnosis_col), \"_percent\")\n  \n  df_combined_long_v2 %&gt;%\n    select(all_of(diagnosis_col), all_of(count_col), all_of(percent_col)) %&gt;%\n    rename(Variable = all_of(diagnosis_col), Count = all_of(count_col), Percent = all_of(percent_col)) %&gt;%\n    mutate(Category = sub(\"CME_MentalHealthDiagnosis_\", \"\", diagnosis_col))\n}\n\n# Reshape the data to long format\ndf_combined_long_v2 &lt;- df_combined_long_v2 %&gt;%\n  # Reshape age categories\n  select(age_cat, count_age_cat, percent_age_cat) %&gt;%\n  rename(Variable = age_cat, Count = count_age_cat, Percent = percent_age_cat) %&gt;%\n  mutate(Category = \"Age\") %&gt;%\n  bind_rows(\n    # Reshape sex categories\n    df_combined_long_v2 %&gt;%\n      select(Sex, count_sex, percent_sex) %&gt;%\n      rename(Variable = Sex, Count = count_sex, Percent = percent_sex) %&gt;%\n      mutate(Category = \"Sex\"),\n    # Reshape all diagnosis categories dynamically\n    bind_rows(lapply(diagnosis_columns, reshape_diagnosis))\n  ) %&gt;%\n  select(Category, Variable, Count, Percent) %&gt;%\n  filter(!(is.na(Variable) & is.na(Count) & is.na(Percent)))\n\n\n\n\nShow code\nknitr::kable(df_combined_long_v2)\n\n\n\n\n\nCategory\nVariable\nCount\nPercent\n\n\n\n\nAge\n15-24\n6\n5.5\n\n\nAge\n25-34\n18\n22.0\n\n\nAge\n35-44\n25\n30.0\n\n\nAge\n45-54\n12\n14.5\n\n\nAge\n55-64\n19\n24.5\n\n\nAge\n65+\n2\n3.5\n\n\nSex\nFemale\n33\n39.3\n\n\nSex\nMale\n51\n60.7\n\n\nadhd\n1\n10\n15.2\n\n\nadhd\n0\n3\n4.5\n\n\nadhd\nNA\n55\n80.3\n\n\nanxiety\n1\n14\n18.9\n\n\nanxiety\n0\n5\n6.8\n\n\nanxiety\nNA\n60\n74.3\n\n\nocd\n1\n9\n14.7\n\n\nocd\n0\n4\n7.5\n\n\nocd\nNA\n38\n77.8"
  },
  {
    "objectID": "notebooks/reshape-combine-multiple-df-long-format.html#do-this-instead---reshape-initial-dataframes-before-combination",
    "href": "notebooks/reshape-combine-multiple-df-long-format.html#do-this-instead---reshape-initial-dataframes-before-combination",
    "title": "",
    "section": "DO this instead - Reshape initial dataframes before combination",
    "text": "DO this instead - Reshape initial dataframes before combination\nRather than combining all the dataframes right away, we should reshape the component dataframes (the smaller dataframes we need to combine) to match the structure of our expected or desired output first, then combine. This reduces the complexity of our logic by not introducing other odd structure we need to deal with. HOWEVER, this only works if you have received the source dataframes and not a combined one. Work with your upstream collaborators to request the component dataframes if you get a combined dataframe from them.\n\nApplying transformations to component dataframes before combining\nThis process might appear longer in the code, but I promise it will be easier to build if you go through this one dataframe at a time. Some of the logic can be applied to multiple dataframes, so some parts below appear redundant (without turning it into functions).\n\n\nShow code\n# Step 1: Convert df_demo (Age Data) to long format\ndf_age_long &lt;- df_age %&gt;%\n  pivot_longer(\n    cols = c(count_age_cat, percent_age_cat),\n    names_to = \"Metric\",\n    values_to = \"Value\"\n  ) %&gt;%\n  mutate(\n    Category = \"Age\",\n    Variable = as.character(age_cat),  # Ensure Variable is character\n    Metric = case_when(\n      grepl(\"count\", Metric) ~ \"Count\",\n      grepl(\"percent\", Metric) ~ \"Percent\"\n    )\n  ) %&gt;%\n  select(Category, Variable, Metric, Value) %&gt;%\n  pivot_wider(names_from = Metric, values_from = Value)\n\nknitr::kable(df_age_long)\n\n\n\n\n\nCategory\nVariable\nCount\nPercent\n\n\n\n\nAge\n15-24\n6\n5.5\n\n\nAge\n25-34\n18\n22.0\n\n\nAge\n35-44\n25\n30.0\n\n\nAge\n45-54\n12\n14.5\n\n\nAge\n55-64\n19\n24.5\n\n\nAge\n65+\n2\n3.5\n\n\n\n\n\n\n\nShow code\n# Step 2: Convert df_sex (Sex Data) to long format\ndf_sex_long &lt;- df_sex %&gt;%\n  pivot_longer(\n    cols = c(count_sex, percent_sex),\n    names_to = \"Metric\",\n    values_to = \"Value\"\n  ) %&gt;%\n  mutate(\n    Category = \"Sex\",\n    Variable = as.character(Sex),  # Ensure Variable is character\n    Metric = case_when(\n      grepl(\"count\", Metric) ~ \"Count\",\n      grepl(\"percent\", Metric) ~ \"Percent\"\n    )\n  ) %&gt;%\n  select(Category, Variable, Metric, Value) %&gt;%\n  pivot_wider(names_from = Metric, values_from = Value)\n\n\n\n\nShow code\n# Step 3: Convert Diagnosis Dataframes to Long Format\nconvert_diagnosis &lt;- function(df, diagnosis_name) {\n  df %&gt;%\n    rename(Variable = 1) %&gt;%  # Rename first column to \"Variable\" (1, 0, NA)\n    mutate(Variable = as.character(Variable)) %&gt;%  # Convert to character to match other tables\n    pivot_longer(\n      cols = ends_with(\"_count\") | ends_with(\"_percent\"),  # Match actual column names\n      names_to = \"Metric\",\n      values_to = \"Value\"\n    ) %&gt;%\n    mutate(\n      Category = diagnosis_name,\n      Metric = case_when(\n        grepl(\"_count\", Metric) ~ \"Count\",\n        grepl(\"_percent\", Metric) ~ \"Percent\"\n      )\n    ) %&gt;%\n    select(Category, Variable, Metric, Value) %&gt;%\n    pivot_wider(names_from = Metric, values_from = Value)\n}\n\n\n\n\nShow code\n# Convert each diagnosis dataframe\ndf_adhd_long &lt;- convert_diagnosis(df_adhd, \"ADHD\")\ndf_anxiety_long &lt;- convert_diagnosis(df_anxiety, \"Anxiety\")\ndf_ocd_long &lt;- convert_diagnosis(df_ocd, \"OCD\")\n\n\n\n\nShow code\n# Step 4: Combine Everything\ndf_component_long &lt;- bind_rows(df_age_long, df_sex_long, df_adhd_long, df_anxiety_long, df_ocd_long)\n\n\n\n\nShow code\n# Display the transformed dataframe\nknitr::kable(df_component_long)\n\n\n\n\n\nCategory\nVariable\nCount\nPercent\n\n\n\n\nAge\n15-24\n6\n5.5\n\n\nAge\n25-34\n18\n22.0\n\n\nAge\n35-44\n25\n30.0\n\n\nAge\n45-54\n12\n14.5\n\n\nAge\n55-64\n19\n24.5\n\n\nAge\n65+\n2\n3.5\n\n\nSex\nFemale\n33\n39.3\n\n\nSex\nMale\n51\n60.7\n\n\nADHD\n1\n10\n15.2\n\n\nADHD\n0\n3\n4.5\n\n\nADHD\nNA\n55\n80.3\n\n\nAnxiety\n1\n14\n18.9\n\n\nAnxiety\n0\n5\n6.8\n\n\nAnxiety\nNA\n60\n74.3\n\n\nOCD\n1\n9\n14.7\n\n\nOCD\n0\n4\n7.5\n\n\nOCD\nNA\n38\n77.8\n\n\n\n\n\n\n\nOptimizing Component Dataframe Method\nSimilar improvements for component dataframe reshaping method as the dynamic improvements we made to combined dataframe method: make it so the code can run with any number of diagnoses columns\n\n\nShow code\n# Function to convert dataframes to long format\nconvert_to_long &lt;- function(df, category_name) {\n  value_columns &lt;- names(df)[grepl(\"count|percent\", names(df))]\n  df %&gt;%\n    pivot_longer(\n      cols = all_of(value_columns),\n      names_to = \"Metric\",\n      values_to = \"Value\"\n    ) %&gt;%\n    rename(Variable = 1) %&gt;%\n    mutate(\n      Category = category_name,\n      Variable = as.character(Variable),  # Ensure Variable is character\n      Metric = case_when(\n        grepl(\"count\", Metric) ~ \"Count\",\n        grepl(\"percent\", Metric) ~ \"Percent\"\n      )\n    ) %&gt;%\n    select(Category, Variable, Metric, Value) %&gt;%\n    pivot_wider(names_from = Metric, values_from = Value)\n}\n\n# Function to apply convert_to_long to a list of dataframes\nconvert_all_diagnoses &lt;- function(dfs, diagnosis_names) {\n  long_dfs &lt;- Map(convert_to_long, dfs, diagnosis_names)\n  bind_rows(long_dfs)\n}\n\n# List of diagnosis dataframes and their corresponding names\ndiagnosis_dfs &lt;- list(df_adhd, df_anxiety, df_ocd)\ndiagnosis_names &lt;- c(\"ADHD\", \"Anxiety\", \"OCD\")\n\n# Convert each dataframe to long format\ndf_age_long &lt;- convert_to_long(df_age, \"Age\")\ndf_sex_long &lt;- convert_to_long(df_sex, \"Sex\")\ndf_diagnoses_long &lt;- convert_all_diagnoses(diagnosis_dfs, diagnosis_names)\n\n# Combine all long dataframes\ndf_component_long_v2 &lt;- bind_rows(df_age_long, df_sex_long, df_diagnoses_long)\n\n# Filter out rows where Variable, Count, and Percent are all NA\ndf_component_long_v2 &lt;- df_component_long_v2 %&gt;%\n  filter(!(is.na(Variable) & is.na(Count) & is.na(Percent)))\n\n\n\n\nShow code\n# Display the transformed dataframe\nknitr::kable(df_component_long_v2)\n\n\n\n\n\nCategory\nVariable\nCount\nPercent\n\n\n\n\nAge\n15-24\n6\n5.5\n\n\nAge\n25-34\n18\n22.0\n\n\nAge\n35-44\n25\n30.0\n\n\nAge\n45-54\n12\n14.5\n\n\nAge\n55-64\n19\n24.5\n\n\nAge\n65+\n2\n3.5\n\n\nSex\nFemale\n33\n39.3\n\n\nSex\nMale\n51\n60.7\n\n\nADHD\n1\n10\n15.2\n\n\nADHD\n0\n3\n4.5\n\n\nADHD\nNA\n55\n80.3\n\n\nAnxiety\n1\n14\n18.9\n\n\nAnxiety\n0\n5\n6.8\n\n\nAnxiety\nNA\n60\n74.3\n\n\nOCD\n1\n9\n14.7\n\n\nOCD\n0\n4\n7.5\n\n\nOCD\nNA\n38\n77.8\n\n\n\n\n\n\n\nInteresting Python Example from Alexey Gilman (DOH)\n\n\nShow code\nimport pandas as pd\ndf = pd.read_csv(\"data/combine-df-diff-categoricals.csv\")\n\n\"\"\"\nindex based categories. data format must be consistent with respect to index:\ni.e., rows 0-5 must be category \"age\", rows 6-7 must be category \"sex\"\n\"\"\"\n\n#define categories and their positions and add as column\nctgr = {0:\"age\",\n        1:\"age\",\n        2:\"age\",\n        3:\"age\",\n        4:\"age\",\n        5:\"age\",\n        6:\"sex\",\n        7:\"sex\",\n        8:\"adhd\",\n        9:\"adhd\",\n        10:\"adhd\",\n        11:\"anxiety\",\n        12:\"anxiety\",\n        13:\"anxiety\",\n        14:\"OCD\",\n        15:\"OCD\",\n        16:\"OCD\"\n       }\n\ndf[\"category\"] = pd.Series(ctgr)\n\n#rename redundant category fields\ndf = df.rename(columns = {\"age_cat\":\"subcategory\",\n                          \"Sex\":\"subcategory\",\n                          \"CME_MentalHealthDiagnosis_adhd\":\"subcategory\",\n                          \"CME_MentalHealthDiagnosis_anxiety\":\"subcategory\",\n                          \"CME_MentalHealthDiagnosis_ocd\":\"subcategory\"})\n\n#regex rename percent and count columns\ndf.columns = (df.columns\n              .str.replace(r'(?i).*count.*', 'count', regex=True)\n              .str.replace(r'(?i).*percent.*', 'percent', regex=True))\n\n#merge columns by name \ndf = df.T.groupby(df.columns).first().T\n\n#reorder columns \ndf = df[[\"category\", \"subcategory\", \"count\", \"percent\"]]"
  },
  {
    "objectID": "notebooks/reshape-combine-multiple-df-long-format.html#optional-write-out-final-table-for-easier-use-later",
    "href": "notebooks/reshape-combine-multiple-df-long-format.html#optional-write-out-final-table-for-easier-use-later",
    "title": "",
    "section": "Optional: Write out final table for easier use later",
    "text": "Optional: Write out final table for easier use later\n\n\nShow code\nreadr::write_csv(df_combined, \"../data/combine-df-diff-categoricals.csv\")\n\n\n\n\nShow code\nreadr::write_csv(df_component_long, \"../data/component-long.csv\")"
  }
]